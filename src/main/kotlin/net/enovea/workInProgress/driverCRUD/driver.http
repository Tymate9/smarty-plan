### ----------------------------------------------------
### Définition des variables
### ----------------------------------------------------
@client_id = smarty-plan-api
@client_secret = **********
@keycloak_host = localhost:45180
@api_host = localhost:8080
@realm = NormandieManutention

@username_admin = admin
@password_admin = root


### 1) Obtenir le token d'accès
### ----------------------------------------------------
POST http://{{keycloak_host}}/realms/{{realm}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=password&client_id={{client_id}}&client_secret={{client_secret}}&username={{username_admin}}&password={{password_admin}}

> {% client.global.set("access_token_admin", response.body.access_token); %}



### 2) Créer un conducteur valide (CREATE)
### ----------------------------------------------------
POST http://{{api_host}}/api/drivers
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": null,
  "firstName": "Jean",
  "lastName": "Dupont",
  "phoneNumber": "0612345678"
}

> {% client.global.set("test_driver_id", response.body.id); %}


### 3) Tenter de créer un conducteur avec un firstName vide (Erreur 400)
### ----------------------------------------------------
POST http://{{api_host}}/api/drivers
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": null,
  "firstName": "",
  "lastName": "Dupont",
  "phoneNumber": "0612345678"
}


### 4) Tenter de créer un conducteur avec un lastName vide (Erreur 400)
### ----------------------------------------------------
POST http://{{api_host}}/api/drivers
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": null,
  "firstName": "Jean",
  "lastName": "",
  "phoneNumber": "0612345678"
}

### 5) Tenter de créer un conducteur avec un numéro de téléphone invalide (Erreur 400)
### ----------------------------------------------------
POST http://{{api_host}}/api/drivers
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": null,
  "firstName": "Jean",
  "lastName": "Dupont",
  "phoneNumber": "0512345678"
}




### 6) Mettre à jour le conducteur (UPDATE)
### ----------------------------------------------------
PUT http://{{api_host}}/api/drivers/{{test_driver_id}}
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": {{test_driver_id}},
  "firstName": "Jean-Michel",
  "lastName": "Dupont",
  "phoneNumber": "0712345678"
}


### 7) Récupérer le conducteur mis à jour (READ)
### ----------------------------------------------------
GET http://{{api_host}}/api/drivers/{{test_driver_id}}
Authorization: Bearer {{access_token_admin}}


### 8) Supprimer le conducteur créé (DELETE)
### ----------------------------------------------------
DELETE http://{{api_host}}/api/drivers/{{test_driver_id}}
Authorization: Bearer {{access_token_admin}}


### 9) Vérifier la suppression (READ)
### ----------------------------------------------------
GET http://{{api_host}}/api/drivers/{{test_driver_id}}
Authorization: Bearer {{access_token_admin}}
