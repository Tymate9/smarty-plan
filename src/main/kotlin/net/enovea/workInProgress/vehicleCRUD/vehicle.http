### ----------------------------------------------------
### Définition des variables
### ----------------------------------------------------
@client_id = smarty-plan-api
@client_secret = **********
@keycloak_host = localhost:45180
@api_host = localhost:8080
@realm = NormandieManutention

@username_admin = admin
@password_admin = root

### ----------------------------------------------------
### 1) Obtenir le token d'accès
### ----------------------------------------------------
POST http://{{keycloak_host}}/realms/{{realm}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=password&client_id={{client_id}}&client_secret={{client_secret}}&username={{username_admin}}&password={{password_admin}}

> {% client.global.set("access_token_admin", response.body.access_token); %}

### ----------------------------------------------------
### Tests de validation du formulaire VehicleForm
### ----------------------------------------------------

### ----------------------------------------------------
### 2) Créer un véhicule valide (CREATE)
###    Utilisation d'une catégorie existante (ex: id=1)
### ----------------------------------------------------
POST http://{{api_host}}/api/vehicles
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": null,
  "energy": "Electrique",
  "engine": "V8",
  "externalid": "EXT123",
  "licenseplate": "AB-123-CD",
  "category": 1,
  "validated": false
}

> {% client.global.set("test_vehicle_id", response.body.id); %}


### ----------------------------------------------------
### 3) Créer un véhicule avec énergie vide (Erreur 400)
### ----------------------------------------------------
POST http://{{api_host}}/api/vehicles
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": null,
  "energy": "",
  "engine": "V8",
  "externalid": "EXT123",
  "licenseplate": "AB-123-CD",
  "category": 1,
  "validated": false
}


### ----------------------------------------------------
### 4) Créer un véhicule avec moteur vide (Erreur 400)
### ----------------------------------------------------
POST http://{{api_host}}/api/vehicles
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": null,
  "energy": "Electrique",
  "engine": "",
  "externalid": "EXT123",
  "licenseplate": "AB-123-CD",
  "category": 1,
  "validated": false
}


### ----------------------------------------------------
### 5) Créer un véhicule avec externalid vide (Erreur 400)
### ----------------------------------------------------
POST http://{{api_host}}/api/vehicles
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": null,
  "energy": "Electrique",
  "engine": "V8",
  "externalid": "",
  "licenseplate": "AB-123-CD",
  "category": 1,
  "validated": false
}


### ----------------------------------------------------
### 6) Créer un véhicule avec une plaque d'immatriculation invalide (Erreur 400)
### ----------------------------------------------------
POST http://{{api_host}}/api/vehicles
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": null,
  "energy": "Electrique",
  "engine": "V8",
  "externalid": "EXT123",
  "licenseplate": "INVALID",
  "category": 1,
  "validated": false
}


### ----------------------------------------------------
### 7) Créer un véhicule avec une catégorie inexistante (Erreur 400)
###    Ici, catégorie 305 n'existe pas.
### ----------------------------------------------------
POST http://{{api_host}}/api/vehicles
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": null,
  "energy": "Electrique",
  "engine": "V8",
  "externalid": "EXT456",
  "licenseplate": "CD-456-EF",
  "category": 305,
  "validated": true
}


### ----------------------------------------------------
### 8) Créer un véhicule avec la catégorie à null (Erreur 400)
### ----------------------------------------------------
POST http://{{api_host}}/api/vehicles
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": null,
  "energy": "Electrique",
  "engine": "V8",
  "externalid": "EXT456",
  "licenseplate": "CD-456-EF",
  "category": null,
  "validated": true
}


### ----------------------------------------------------
### Tests CRUD classiques sur le véhicule créé en étape 2
### ----------------------------------------------------

### ----------------------------------------------------
### 9) Mettre à jour le véhicule (UPDATE)
###    Modification de l'énergie, du moteur, de l'externalid, de la plaque et du statut validated.
### ----------------------------------------------------
PUT http://{{api_host}}/api/vehicles/{{test_vehicle_id}}
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": "{{test_vehicle_id}}",
  "energy": "Hybride",
  "engine": "V8 Turbo",
  "externalid": "EXT789",
  "licenseplate": "EF-789-GH",
  "category": 1,
  "validated": true
}


### ----------------------------------------------------
### 10) Récupérer le véhicule mis à jour (READ)
### ----------------------------------------------------
GET http://{{api_host}}/api/vehicles/{{test_vehicle_id}}
Authorization: Bearer {{access_token_admin}}


### ----------------------------------------------------
### 11) Supprimer le véhicule (DELETE)
###    La réponse doit renvoyer le DTO du véhicule supprimé.
### ----------------------------------------------------
DELETE http://{{api_host}}/api/vehicles/{{test_vehicle_id}}
Authorization: Bearer {{access_token_admin}}


### ----------------------------------------------------
### 12) Vérifier la suppression (READ)
###    Cette requête devrait retourner une 404 Not Found.
### ----------------------------------------------------
GET http://{{api_host}}/api/vehicles/{{test_vehicle_id}}
Authorization: Bearer {{access_token_admin}}
