### ----------------------------------------------------
### Définition des variables
### ----------------------------------------------------
@client_id = smarty-plan-api
@client_secret = **********
@keycloak_host = localhost:45180
@api_host = localhost:8080
@realm = NormandieManutention

@username_admin = admin
@password_admin = root


### 1) Obtenir le token d'accès
### ----------------------------------------------------
POST http://{{keycloak_host}}/realms/{{realm}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=password&client_id={{client_id}}&client_secret={{client_secret}}&username={{username_admin}}&password={{password_admin}}

> {% client.global.set("access_token_admin", response.body.access_token); %}

### 2) CREATE : Créer un véhicule valide (CREATE)
### ----------------------------------------------------
POST http://{{api_host}}/api/vehicles
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": null,
  "energy": "Electrique",
  "engine": "V8",
  "externalid": "EXT123",
  "licenseplate": "AB123CD",
  "category": 1,
  "validated": false
}

> {%
    client.global.set("test_vehicle_id", response.body.id);
    client.test("CREATE véhicule valide", function() {
        client.assert(response.status === 200, "Expected 200 OK on valid creation");
    });
%}

### 3) CREATE : Créer un véhicule avec énergie vide (Erreur 400)
### ----------------------------------------------------
POST http://{{api_host}}/api/vehicles
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": null,
  "energy": "",
  "engine": "V8",
  "externalid": "EXT123",
  "licenseplate": "AB-123-CD",
  "category": 1,
  "validated": false
}

> {%
    client.test("CREATE véhicule avec énergie vide => 400", function() {
        client.assert(response.status === 400, "Expected 400 Bad Request when energy is empty");
    });
%}

### 4) CREATE : Créer un véhicule avec moteur vide (Erreur 400)
### ----------------------------------------------------
POST http://{{api_host}}/api/vehicles
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": null,
  "energy": "Electrique",
  "engine": "",
  "externalid": "EXT123",
  "licenseplate": "AB-123-CD",
  "category": 1,
  "validated": false
}

> {%
    client.test("CREATE véhicule avec moteur vide => 400", function() {
        client.assert(response.status === 400, "Expected 400 Bad Request when engine is empty");
    });
%}

### 5) CREATE : Créer un véhicule avec externalid vide (Erreur 400)
### ----------------------------------------------------
POST http://{{api_host}}/api/vehicles
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": null,
  "energy": "Electrique",
  "engine": "V8",
  "externalid": "",
  "licenseplate": "AB-123-CD",
  "category": 1,
  "validated": false
}

> {%
    client.test("CREATE véhicule avec externalid vide => 400", function() {
        client.assert(response.status === 400, "Expected 400 Bad Request when externalid is empty");
    });
%}

### 6) CREATE : Créer un véhicule avec une plaque d'immatriculation invalide (Erreur 400)
### ----------------------------------------------------
POST http://{{api_host}}/api/vehicles
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": null,
  "energy": "Electrique",
  "engine": "V8",
  "externalid": "EXT123",
  "licenseplate": "INVALID",
  "category": 1,
  "validated": false
}

> {%
    client.test("CREATE véhicule avec plaque invalide => 400", function() {
        client.assert(response.status === 400, "Expected 400 Bad Request for invalid license plate");
    });
%}

### 7) CREATE : Créer un véhicule avec une catégorie inexistante (Erreur 400)
### ----------------------------------------------------
POST http://{{api_host}}/api/vehicles
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": null,
  "energy": "Electrique",
  "engine": "V8",
  "externalid": "EXT456",
  "licenseplate": "CD-456-EF",
  "category": 305,
  "validated": true
}

> {%
    client.test("CREATE véhicule avec catégorie inexistante => 400", function() {
        client.assert(response.status === 400, "Expected 400 Bad Request for non-existent category");
    });
%}

### 8) CREATE : Créer un véhicule avec la catégorie à null (Erreur 400)
### ----------------------------------------------------
POST http://{{api_host}}/api/vehicles
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": null,
  "energy": "Electrique",
  "engine": "V8",
  "externalid": "EXT456",
  "licenseplate": "CD-456-EF",
  "category": null,
  "validated": true
}

> {%
    client.test("CREATE véhicule avec catégorie null => 400", function() {
        client.assert(response.status === 400, "Expected 400 Bad Request when category is null");
    });
%}

### 9) UPDATE : Mettre à jour le véhicule (UPDATE)
### ----------------------------------------------------
PUT http://{{api_host}}/api/vehicles/{{test_vehicle_id}}
Content-Type: application/json
Authorization: Bearer {{access_token_admin}}

{
  "id": "{{test_vehicle_id}}",
  "energy": "Hybride",
  "engine": "V8 Turbo",
  "externalid": "EXT789",
  "licenseplate": "EF789GH",
  "category": 1,
  "validated": true
}

> {%
    client.test("UPDATE véhicule => 200", function() {
        client.assert(response.status === 200, "Expected 200 OK on update");
    });
%}

### 10) READ : Récupérer le véhicule mis à jour (READ)
### ----------------------------------------------------
GET http://{{api_host}}/api/vehicles/{{test_vehicle_id}}
Authorization: Bearer {{access_token_admin}}

> {%
    client.test("READ véhicule => 200", function() {
        client.assert(response.status === 200, "Expected 200 OK on read after update");
        client.assert(response.body.energy === "Hybride", "Energy should be updated to Hybride");
        client.assert(response.body.engine === "V8 Turbo", "Engine should be updated to V8 Turbo");
    });
%}

### 11) DELETE : Supprimer le véhicule (DELETE)
### ----------------------------------------------------
DELETE http://{{api_host}}/api/vehicles/{{test_vehicle_id}}
Authorization: Bearer {{access_token_admin}}

> {%
    client.test("DELETE véhicule => 200", function() {
        client.assert(response.status === 200, "Expected 200 OK on vehicle delete");
    });
%}

### 12) READ après DELETE : Vérifier la suppression (READ)
### ----------------------------------------------------
GET http://{{api_host}}/api/vehicles/{{test_vehicle_id}}
Authorization: Bearer {{access_token_admin}}

> {%
    client.test("READ après DELETE véhicule => 404", function() {
        client.assert(response.status === 404, "Expected 404 Not Found after vehicle deletion");
    });
%}